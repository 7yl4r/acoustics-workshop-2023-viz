---
title: "classification_output_viewer"
format: html
editor: visual
---

```{python}
CSV_PATH="https://raw.githubusercontent.com/holtzy/The-Python-Graph-Gallery/master/static/data/trentino_temperature.csv"
```

```{python}
#| echo: false

import matplotlib.colors as mc # For the legend
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Another utility for the legend
from matplotlib.cm import ScalarMappable

data = pd.read_csv(
    CSV_PATH
)
data["hour"] = data["hour"].astype(int).map('{:02d}'.format)
data
data["datetime"] = data[["date", "hour"]].astype(str).agg(' '.join, axis=1) 
data["datetime"] = pd.to_datetime(
    data["datetime"],
    format="%Y/%m/%d %H"
)

# Subset data
subset = data[(data["datetime"].dt.year == 2004) & (data["datetime"].dt.month == 1)]

# Extract hour, day, and temperature
hour = subset["hour"]
day = subset["datetime"].dt.day
temp = subset["temp"]

# Re-arrange temperature values
temp = temp.values.reshape(24, len(day.unique()), order="F")

# Compute x and y grids, passed to `ax.pcolormesh()`.

# The first + 1 increases the length
# The outer + 1 ensures days start at 1, and not at 0.
xgrid = np.arange(day.max() + 1) + 1

# Hours start at 0, length 2
ygrid = np.arange(25)

fig, ax = plt.subplots()
ax.pcolormesh(xgrid, ygrid, temp)
ax.set_frame_on(False) # remove all spines

plt.show()
```
